{
  "hash": "18ae434b6d8c6e385e6be17925b944ea",
  "result": {
    "engine": "knitr",
    "markdown": "# Basic workflow with brms\n\nThe [brms](https://paulbuerkner.com/brms/) package provides a flexible framework for specifying multilevel regression models, using Stan as the back end. It is typically used for models within the generalized linear mixed model (GLMM) specification, but can accommodate nonlinear models such as E~max~. This chapter uses the brms package to develop and evaluate Bayesian E~max~ regression models. Models for continuous and binary response data are discussed, and in the next chapter these are extended to discuss covariate modeling.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(posterior)\nlibrary(tidybayes)\nlibrary(here)\n\ntheme_set(theme_bw(base_size = 12))\n```\n:::\n\n\n\n\n\n\n## Hyperbolic E~max~ models\n\nThis section shows how to build a standard E~max~ model for continuous response data using brms. To build the model a simulated data set is used:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_3cov <- read_csv(here(\"data\", \"d_example_emax_3cov.csv\"))\nd_example_emax_3cov\n```\n\n<pre class=\"r-output\"><code><span style='color: #555555;'># A tibble: 300 × 6</span>\n    dose exposure cov_a cov_b cov_c response\n   <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span>\n<span style='color: #555555;'> 1</span>   100    <span style='text-decoration: underline;'>4</span>151.  5.71  2.33  7.83     14.2\n<span style='color: #555555;'> 2</span>   100    <span style='text-decoration: underline;'>8</span>067.  4.92  4.66  6.74     14.0\n<span style='color: #555555;'> 3</span>   100    <span style='text-decoration: underline;'>4</span>878.  4.88  4.21  4.68     13.3\n<span style='color: #555555;'> 4</span>   100    <span style='text-decoration: underline;'>9</span>713.  8.42  6.56  1.29     16.4\n<span style='color: #555555;'> 5</span>   100   <span style='text-decoration: underline;'>11</span>491.  4.37  3.96  3.55     15.1\n<span style='color: #555555;'> 6</span>   100    <span style='text-decoration: underline;'>2</span>452.  8.69  7.60  3.64     13.6\n<span style='color: #555555;'> 7</span>   100    <span style='text-decoration: underline;'>5</span>652.  6.61  3.95  5.13     14.1\n<span style='color: #555555;'> 8</span>   100    <span style='text-decoration: underline;'>9</span>939.  5.35  7.77  8.29     15.0\n<span style='color: #555555;'> 9</span>   100    <span style='text-decoration: underline;'>5</span>817.  5.61  2.24  9.60     13.3\n<span style='color: #555555;'>10</span>   100    <span style='text-decoration: underline;'>5</span>176.  6.06  1.79  8.74     14.1\n<span style='color: #555555;'># ℹ 290 more rows</span>\n</code></pre>\n:::\n\n\n\n\nIn this chapter only the `exposure` and `response` columns are used. A simple exploratory visualization of the exposure-response relationship is shown below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_3cov |> \n  ggplot(aes(exposure, response)) + \n  geom_point() + \n  geom_smooth(formula = y ~ x, method = \"loess\")\n```\n\n::: {.cell-output-display}\n![](basic_workflow_brms_files/figure-html/show-continuous-emax-data-1.png){width=768}\n:::\n:::\n\n\n\n\nThe model considered in this section is a hyperbolic E~max~ model, in which the Hill coefficient is fixed to unity (i.e. `gamma = 1`). The model construction takes place in stages. First, use `brmsformula()` to describe the exposure-response relationship, setting `nl = TRUE` to ensure that brms interprets the input as a non-linear model:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyperbolic_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure),\n  e0 ~ 1,\n  emax ~ 1,\n  ec50 ~ 1,\n  nl = TRUE\n) \n```\n:::\n\n\n\n\nIn this specification, the first formula indicates that the exposure-response relationship is an E~max~ function. The later formulas indicate that `e0`, `emax`, and `ec50` are model parameters.\n\nIn the second stage, assumptions must also be specified for the distribution of measurement errors. For simplicity, this example assumes errors are normally distributed. Use the `brmsfamily()` function to specify this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngaussian_measurement <- brmsfamily(\n  family = \"gaussian\", \n  link = \"identity\"\n)\n```\n:::\n\n\n\n\nIn the third stage, parameter priors for `e0`, `emax`, and `ec50` must also be specified. In brms the default is to place an improper flat prior on regression parameters. For this example a weakly-informative prior is used. The `prior()` function is used for this, using the `nlpar` argument to specify the name of a non-linear parameter, and using `lb` and `ub` to impose lower and upper bounds if required:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyperbolic_model_prior <- c(\n  prior(normal(0, 1.5), nlpar = \"e0\"),\n  prior(normal(0, 1.5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n)\n```\n:::\n\n\n\n\nThese three components provide the complete specification of the model. They are passed to `brm()` along with the data to estimate model parameters:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyperbolic_model_fit <- brm(\n  formula = hyperbolic_model, \n  family = gaussian_measurement, \n  data = d_example_emax_3cov, \n  prior = hyperbolic_model_prior\n) \n```\n:::\n\n\n\n\nWhen this code is executed a Stan model is compiled and run, and detailed information on the sampling is printed during the run. \n\nAfter the sampling is complete the user can inspect the brms model object to obtain a summary of the model, the sampling, and the parameter estimates:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyperbolic_model_fit\n```\n\n<pre class=\"r-output\"><code> Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       6.52      0.63     5.23     7.69 1.00     1148     1526\nemax_Intercept    10.55      0.66     9.29    11.84 1.00     1316     1715\nec50_Intercept  2969.54    347.69  2321.45  3687.50 1.00     1383     1844\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.29      0.05     1.19     1.40 1.00     1562     1881\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\nThe data can be visualized in many different ways. A simple example is shown below, using `epred_draws()` to extract model predictions as a function of exposure, and `median_qi()` to calculate a 95% interval around the model predictions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyperbolic_model_fit |> \n  epred_draws(newdata = tibble(exposure = seq(0, 50000, 1000))) |> \n  median_qi() |> \n  ggplot(mapping = aes(exposure, .epred)) + \n  geom_path() + \n  geom_ribbon(aes(ymin = .lower, ymax = .upper), alpha = 0.3) +\n  geom_point(data = d_example_emax_3cov, mapping = aes(y = response))\n```\n\n::: {.cell-output-display}\n![](basic_workflow_brms_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n## Sigmoidal E~max~ models\n\nIt is often necessary to consider sigmoidal E~max~ models, in which the Hill coefficient `gamma` is estimated from data. To do so within in the brms framework, the first step is to incorporate the `gamma` parameter in the model specification:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigmoidal_model <- brmsformula(\n  response ~ e0 + emax * exposure^gamma / (ec50^gamma + exposure^gamma),\n  e0 ~ 1,\n  emax ~ 1,\n  ec50 ~ 1,\n  gamma ~ 1,\n  nl = TRUE\n) \n```\n:::\n\n\n\n\nNext, because `gamma` is now a model parameter, a prior for it must be specified. The prior specification may now look like this: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigmoidal_model_prior <- c(\n  prior(normal(0, 1.5), nlpar = \"e0\"),\n  prior(normal(0, 1.5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0),\n  prior(lognormal(0, 0.25), nlpar = \"gamma\", lb = 0)\n)\n```\n:::\n\n\n\n\nNo changes to the measurement model are required: like the hyperbolic E~max~ model, it is typical to fit the sigmoidal E~max~ model to continuous responses by assuming measurement errors are described by independent normal variates. \n\nTo fit the model, call `brm()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigmoidal_model_fit <- brm(\n  formula = sigmoidal_model, \n  family = gaussian_measurement, \n  data = d_example_emax_3cov, \n  prior = sigmoidal_model_prior\n) \n```\n:::\n\n\n\n\nOnce the sampling is complete, printing the model object displays estimated model parameters, 95% credible intervals for those parameters, and diagnostic information about the sampling: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigmoidal_model_fit\n```\n\n<pre class=\"r-output\"><code> Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure^gamma/(ec50^gamma + exposure^gamma) \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n         gamma ~ 1\n   Data: d_example_emax_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept        6.62      0.68     5.24     7.96 1.00     1180     1725\nemax_Intercept     10.27      0.84     8.62    11.95 1.00     1250     1751\nec50_Intercept   3004.63    346.32  2360.63  3708.74 1.00     1373     2026\ngamma_Intercept     1.08      0.12     0.87     1.34 1.00     1879     2347\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.29      0.05     1.19     1.40 1.00     2276     2463\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\nIn this instance it is clear from inspection that a sigmoidal model is unnecessary: the posterior mean for `gamma` is 1.08 with 95% credible interval from 0.87 to 1.34. A hyperbolic model is the more natural choice here. If explicit model comparison is required, cross-validation methods such as LOO-CV can be used to compare the performance of different brms models estimated from the same data. This is discussed in the next chapter.\n\n## Binary E~max~ models \n\nNow consider the case where the response is binary. Again, a simulated data set is used, identical to the previous example except that the `response` variable is now 0 or 1 for each subject:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_bin_3cov <- read_csv(here(\"data\", \"d_example_emax_bin_3cov.csv\"))\nd_example_emax_bin_3cov\n```\n\n<pre class=\"r-output\"><code><span style='color: #555555;'># A tibble: 300 × 6</span>\n    dose exposure cov_a cov_b cov_c response\n   <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span>\n<span style='color: #555555;'> 1</span>   100    <span style='text-decoration: underline;'>4</span>151.  5.71  2.33  7.83        0\n<span style='color: #555555;'> 2</span>   100    <span style='text-decoration: underline;'>8</span>067.  4.92  4.66  6.74        1\n<span style='color: #555555;'> 3</span>   100    <span style='text-decoration: underline;'>4</span>878.  4.88  4.21  4.68        1\n<span style='color: #555555;'> 4</span>   100    <span style='text-decoration: underline;'>9</span>713.  8.42  6.56  1.29        1\n<span style='color: #555555;'> 5</span>   100   <span style='text-decoration: underline;'>11</span>491.  4.37  3.96  3.55        1\n<span style='color: #555555;'> 6</span>   100    <span style='text-decoration: underline;'>2</span>452.  8.69  7.60  3.64        0\n<span style='color: #555555;'> 7</span>   100    <span style='text-decoration: underline;'>5</span>652.  6.61  3.95  5.13        1\n<span style='color: #555555;'> 8</span>   100    <span style='text-decoration: underline;'>9</span>939.  5.35  7.77  8.29        1\n<span style='color: #555555;'> 9</span>   100    <span style='text-decoration: underline;'>5</span>817.  5.61  2.24  9.60        0\n<span style='color: #555555;'>10</span>   100    <span style='text-decoration: underline;'>5</span>176.  6.06  1.79  8.74        1\n<span style='color: #555555;'># ℹ 290 more rows</span>\n</code></pre>\n:::\n\n\n\n\nThe exposure-response relationship is illustrated by plotting the difference in exposure between responders and non-responders:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_bin_3cov |> \n  mutate(response = factor(response)) |> \n  ggplot(aes(response, exposure)) + \n  geom_violin(draw_quantiles = .5)\n```\n\n::: {.cell-output-display}\n![](basic_workflow_brms_files/figure-html/show-binary-emax-data-1.png){width=768}\n:::\n:::\n\n\n\n\nTo adapt the brms model to be appropriate for binary responses, the measurement model is adjusted. As in logistic regression, binary responses are assumed to be Bernoulli distributed, with a logit link function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbernoulli_measurement <- brmsfamily(\n  family = \"bernoulli\", \n  link = \"logit\"\n)\n```\n:::\n\n\n\n\nThis is the only respect in which the binary model differs from its continuous counterpart. The model formula and prior specification is the same as for the original model at the start of the chapter:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure),\n  e0 ~ 1,\n  emax ~ 1,\n  ec50 ~ 1,\n  nl = TRUE\n) \n\nbinary_model_prior <- c(\n  prior(normal(0, 1.5), nlpar = \"e0\"),\n  prior(normal(0, 1.5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n)\n```\n:::\n\n\n\n\nTo estimate parameters, call `brm()` for the binary data set using the `bernoulli_measurement` family:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_base_fit <- brm(\n  formula = binary_model, \n  family = bernoulli_measurement, \n  data = d_example_emax_bin_3cov, \n  prior = binary_model_prior\n) \n```\n:::\n\n\n\n\nAgain, inspect the model fit object to see the results:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_base_fit\n```\n\n<pre class=\"r-output\"><code> Family: bernoulli \n  Links: mu = logit \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_bin_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept      -1.36      0.69    -2.73    -0.03 1.01     1393     1535\nemax_Intercept     3.45      0.88     1.76     5.17 1.00     1438     1252\nec50_Intercept  2421.04    434.13  1583.85  3291.06 1.00     1843     1292\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\nThe predictions of the fitted model are visualized below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_base_fit |> \n  epred_draws(newdata = tibble(exposure = seq(0, 50000, 1000))) |> \n  median_qi() |> \n  ggplot(mapping = aes(exposure, .epred)) + \n  geom_path() + \n  geom_ribbon(\n    mapping = aes(ymin = .lower, ymax = .upper), \n    alpha = 0.3\n  ) +\n  geom_jitter(\n    data = d_example_emax_bin_3cov,\n    mapping = aes(y = response), \n    width = 0, \n    height = .05\n  )\n```\n\n::: {.cell-output-display}\n![](basic_workflow_brms_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "basic_workflow_brms_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}