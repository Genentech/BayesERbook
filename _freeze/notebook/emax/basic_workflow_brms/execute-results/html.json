{
  "hash": "57bd7df1fb9f2b15fa2d120e05bc2e71",
  "result": {
    "engine": "knitr",
    "markdown": "# Basic workflow with brms\n\nThe [brms](https://paulbuerkner.com/brms/) package provides a flexible framework for specifying multilevel regression models, using Stan as the back end. It is typically used for models within the generalized linear mixed model (GLMM) specification, but can accommodate nonlinear models such as E~max~. This chapter uses the brms package to develop and evaluate Bayesian E~max~ regression. Models for continuous and binary response data are discussed, and in the next chapter these are extended to include covariates.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(posterior)\nlibrary(tidybayes)\nlibrary(here)\n\ntheme_set(theme_bw(base_size = 12))\n```\n:::\n\n\n\n\n\n\n\n## Continuous E~max~ models \n\nThis section shows how to build a simple E~max~ model for continuous response data using brms. The extension to binary response data is discussed in the next section. To build the model a simulated data set is used. In addition to an `exposure` column and a continuous `response` column, there are three continuous covariates that may be related to the response and will be used in the next chapter:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_3cov <- read_csv(here(\"data\", \"d_example_emax_3cov.csv\"))\nd_example_emax_3cov\n```\n\n<pre class=\"r-output\"><code><span style='color: #555555;'># A tibble: 300 × 6</span>\n    dose exposure cov_a cov_b cov_c response\n   <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span>\n<span style='color: #555555;'> 1</span>   100    <span style='text-decoration: underline;'>4</span>151.  5.71  2.33  7.83     13.8\n<span style='color: #555555;'> 2</span>   100    <span style='text-decoration: underline;'>8</span>067.  4.92  4.66  6.74     14.0\n<span style='color: #555555;'> 3</span>   100    <span style='text-decoration: underline;'>4</span>878.  4.88  4.21  4.68     13.2\n<span style='color: #555555;'> 4</span>   100    <span style='text-decoration: underline;'>9</span>713.  8.42  6.56  1.29     16.1\n<span style='color: #555555;'> 5</span>   100   <span style='text-decoration: underline;'>11</span>491.  4.37  3.96  3.55     15.1\n<span style='color: #555555;'> 6</span>   100    <span style='text-decoration: underline;'>2</span>452.  8.69  7.60  3.64     13.4\n<span style='color: #555555;'> 7</span>   100    <span style='text-decoration: underline;'>5</span>652.  6.61  3.95  5.13     13.5\n<span style='color: #555555;'> 8</span>   100    <span style='text-decoration: underline;'>9</span>939.  5.35  7.77  8.29     15.5\n<span style='color: #555555;'> 9</span>   100    <span style='text-decoration: underline;'>5</span>817.  5.61  2.24  9.60     12.5\n<span style='color: #555555;'>10</span>   100    <span style='text-decoration: underline;'>5</span>176.  6.06  1.79  8.74     13.3\n<span style='color: #555555;'># ℹ 290 more rows</span>\n</code></pre>\n:::\n\n\n\n\n\nTo examine the structure of the data set, create an exploratory visualization:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_3cov |> \n  pivot_longer(\n    cols = c(exposure, cov_a, cov_b, cov_c), \n    names_to = \"variable\",\n    values_to = \"value\"\n  ) |> \n  ggplot(aes(value, response)) + \n  geom_point() + \n  geom_smooth(formula = y ~ x, method = \"loess\") + \n  facet_wrap(~ variable, scales = \"free_x\")\n```\n\n::: {.cell-output-display}\n![](basic_workflow_brms_files/figure-html/show-continuous-emax-data-1.png){width=768}\n:::\n:::\n\n\n\n\n\n### Hyperbolic E~max~ models\n\nInitially we will build a hypoberbolic E~max~ model in which we fix $\\gamma = 1$. To specify a regular E~max~ model in brms, use `brmsformula()` to describe the exposure-response relationship, setting `nl = TRUE` to ensure that brms interprets the input as a non-linear model:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure),\n  e0 ~ 1,\n  emax ~ 1,\n  ec50 ~ 1,\n  nl = TRUE\n) \n```\n:::\n\n\n\n\n\nIn this specification, the first formula indicates that the exposure-response relationship is an E~max~ function. The later formulas indicate that `e0`, `emax`, and `ec50` are model parameters.\n\nAssumptions must also be specified for the distribution of measurement errors. For simplicity, this example assumes errors are normally distributed. Use the `brmsfamily()` function to specify this:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngaussian_measurement <- brmsfamily(\n  family = \"gaussian\", \n  link = \"identity\"\n)\n```\n:::\n\n\n\n\n\nParameter priors for `e0`, `emax`, and `ec50` must also be specified. In brms the default is to place an improper flat prior on regression parameters. For this example a weakly-informative prior is used. The `prior()` function is used for this, using the `nlpar` argument to specify the name of a non-linear parameter, and using `lb` and `ub` to impose lower and upper bounds if required:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparameter_prior <- c(\n  prior(normal(0, 1.5), nlpar = \"e0\"),\n  prior(normal(0, 1.5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n)\n```\n:::\n\n\n\n\n\nThese three components are then passed to `brm()` to estimate model parameters:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_base_fit <- brm(\n  formula = base_model, \n  family = gaussian_measurement, \n  data = d_example_emax_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\n\nWhen this code is executed a Stan model is compiled and run, and detailed information on the sampling is printed during the run. At the end, inspect the brms model object to obtain a summary of the model, the sampling, and the parameter estimates:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_base_fit\n```\n\n<pre class=\"r-output\"><code> Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       6.45      0.62     5.19     7.60 1.00     1104     1388\nemax_Intercept    10.72      0.61     9.57    11.94 1.00     1187     1499\nec50_Intercept  3075.26    351.19  2427.37  3789.91 1.00     1377     1774\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.04      0.04     0.96     1.13 1.00     1731     1779\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\n\nThe data can be visualized in many different ways. A simple example is shown below, using `epred_draws()` to extract model predictions as a function of exposure:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_base_fit |> \n  epred_draws(newdata = tibble(exposure = seq(0, 50000, 1000))) |> \n  median_qi() |> \n  ggplot(mapping = aes(exposure, .epred)) + \n  geom_path() + \n  geom_ribbon(aes(ymin = .lower, ymax = .upper), alpha = 0.3) +\n  geom_point(data = d_example_emax_3cov, mapping = aes(y = response))\n```\n\n::: {.cell-output-display}\n![](basic_workflow_brms_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Sigmoidal E~max~ models\n\nThe generalization to sigmoidal E~max~ models is as follows. First, the `gamma` parameter needs to be incorporated in the model specification:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigmoidal_model <- brmsformula(\n  response ~ e0 + emax * exposure^gamma / (ec50^gamma + exposure^gamma),\n  e0 ~ 1,\n  emax ~ 1,\n  ec50 ~ 1,\n  gamma ~ 1,\n  nl = TRUE\n) \n```\n:::\n\n\n\n\n\nBecause `gamma` is a model parameter, a prior for it must be specified. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigmoidal_parameter_prior <- c(\n  prior(normal(0, 1.5), nlpar = \"e0\"),\n  prior(normal(0, 1.5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0),\n  prior(lognormal(0, 0.25), nlpar = \"gamma\", lb = 0)\n)\n```\n:::\n\n\n\n\n\nNext call `brm()`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigmoidal_model_fit <- brm(\n  formula = sigmoidal_model, \n  family = gaussian_measurement, \n  data = d_example_emax_3cov, \n  prior = sigmoidal_parameter_prior\n) \n```\n:::\n\n\n\n\n\nModel fit\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigmoidal_model_fit\n```\n\n<pre class=\"r-output\"><code> Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure^gamma/(ec50^gamma + exposure^gamma) \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n         gamma ~ 1\n   Data: d_example_emax_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept        6.58      0.64     5.22     7.76 1.00     1212     1593\nemax_Intercept     10.46      0.78     9.00    12.04 1.00     1235     1299\nec50_Intercept   3123.33    336.53  2475.65  3800.59 1.00     1540     1963\ngamma_Intercept     1.06      0.10     0.87     1.28 1.00     1782     2185\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.05      0.04     0.97     1.14 1.00     2309     2137\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\n\nClear from inspection that there is no need for a sigmoidal model here: the posterior mean for `gamma` is 1.06 with 95% credible interval from 0.87 to 1.28. However, if an explicit model comparison is required, cross-validation methods such as LOO-CV can be used to compare `sigmoidal_model_fit` to `continuous_base_fit`. This is discussed in the next chapter.\n\n## Binary E~max~ models \n\nThe data set with binary response data is identical to the continuous data apart from the `response` variable, which is now 0 or 1 for each subject:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_bin_3cov <- read_csv(here(\"data\", \"d_example_emax_bin_3cov.csv\"))\nd_example_emax_bin_3cov\n```\n\n<pre class=\"r-output\"><code><span style='color: #555555;'># A tibble: 300 × 6</span>\n    dose exposure cov_a cov_b cov_c response\n   <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span>\n<span style='color: #555555;'> 1</span>   100    <span style='text-decoration: underline;'>4</span>151.  5.71  2.33  7.83        0\n<span style='color: #555555;'> 2</span>   100    <span style='text-decoration: underline;'>8</span>067.  4.92  4.66  6.74        1\n<span style='color: #555555;'> 3</span>   100    <span style='text-decoration: underline;'>4</span>878.  4.88  4.21  4.68        1\n<span style='color: #555555;'> 4</span>   100    <span style='text-decoration: underline;'>9</span>713.  8.42  6.56  1.29        1\n<span style='color: #555555;'> 5</span>   100   <span style='text-decoration: underline;'>11</span>491.  4.37  3.96  3.55        0\n<span style='color: #555555;'> 6</span>   100    <span style='text-decoration: underline;'>2</span>452.  8.69  7.60  3.64        0\n<span style='color: #555555;'> 7</span>   100    <span style='text-decoration: underline;'>5</span>652.  6.61  3.95  5.13        0\n<span style='color: #555555;'> 8</span>   100    <span style='text-decoration: underline;'>9</span>939.  5.35  7.77  8.29        0\n<span style='color: #555555;'> 9</span>   100    <span style='text-decoration: underline;'>5</span>817.  5.61  2.24  9.60        0\n<span style='color: #555555;'>10</span>   100    <span style='text-decoration: underline;'>5</span>176.  6.06  1.79  8.74        0\n<span style='color: #555555;'># ℹ 290 more rows</span>\n</code></pre>\n:::\n\n\n\n\n\nTo examine the structure of the data set, create an exploratory visualization:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_bin_3cov |> \n  pivot_longer(\n    cols = c(exposure, cov_a, cov_b, cov_c), \n    names_to = \"variable\",\n    values_to = \"value\"\n  ) |> \n  mutate(response = factor(response)) |> \n  ggplot(aes(response, value)) + \n  geom_violin(draw_quantiles = .5) + \n  facet_wrap(~ variable, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](basic_workflow_brms_files/figure-html/show-binary-emax-data-1.png){width=768}\n:::\n:::\n\n\n\n\n\nTo adapt the brms model to be appropriate for binary responses, the measurement model is adjusted. As in logistic regression, binary responses are assumed to be Bernoulli distributed, with a logit link function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbernoulli_measurement <- brmsfamily(\n  family = \"bernoulli\", \n  link = \"logit\"\n)\n```\n:::\n\n\n\n\n\nThis is the only modification required: the `parameter_prior` and `base_model` are both unchanged. To estimate parameters, call `brm()` for the binary data set using the `bernoulli_measurement` family:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_base_fit <- brm(\n  formula = base_model, \n  family = bernoulli_measurement, \n  data = d_example_emax_bin_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\n\nAgain, inspect the model fit object to see the results:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_base_fit\n```\n\n<pre class=\"r-output\"><code> Family: bernoulli \n  Links: mu = logit \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_bin_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept      -1.42      0.65    -2.69    -0.16 1.00     1408     1734\nemax_Intercept     2.80      0.82     1.20     4.39 1.00     1444     1731\nec50_Intercept  2344.87    442.61  1494.52  3236.56 1.00     1784     1569\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\n\nThe predictions of the fitted model are visualized below:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_base_fit |> \n  epred_draws(newdata = tibble(exposure = seq(0, 50000, 1000))) |> \n  median_qi() |> \n  ggplot(mapping = aes(exposure, .epred)) + \n  geom_path() + \n  geom_ribbon(\n    mapping = aes(ymin = .lower, ymax = .upper), \n    alpha = 0.3\n  ) +\n  geom_jitter(\n    data = d_example_emax_bin_3cov,\n    mapping = aes(y = response), \n    width = 0, \n    height = .05\n  )\n```\n\n::: {.cell-output-display}\n![](basic_workflow_brms_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "basic_workflow_brms_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}