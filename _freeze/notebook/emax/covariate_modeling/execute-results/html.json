{
  "hash": "2ab2dc9ca8ba376979e30e3158adbb5a",
  "result": {
    "engine": "knitr",
    "markdown": "# Covariate modeling with brms\n\nThe [brms](https://paulbuerkner.com/brms/) package provides a flexible framework for specifying multilevel regression models, using Stan as the back end. It is typically used for models within the generalized linear mixed model (GLMM) specification, but can accommodate nonlinear models such as E~max~. This chapter uses the brms package to develop and evaluate Bayesian E~max~ regression models with and without covariates. Models for continuous and binary response data are discussed. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(posterior)\nlibrary(tidybayes)\nlibrary(here)\n\ntheme_set(theme_bw(base_size = 12))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load data\nd_example_emax_3cov <- read_csv(here(\"data\", \"d_example_emax_3cov.csv\"))\nd_example_emax_bin_3cov <- read_csv(here(\"data\", \"d_example_emax_bin_3cov.csv\"))\n\n# model specification\nbase_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure),\n  e0 ~ 1,\n  emax ~ 1,\n  ec50 ~ 1,\n  nl = TRUE\n)\n\n# gaussian measurement for continuous data\ngaussian_measurement <- brmsfamily(\n  family = \"gaussian\", \n  link = \"identity\"\n)\n\n# bernoulli maeasurement for binary data\nbernoulli_measurement <- brmsfamily(\n  family = \"bernoulli\", \n  link = \"logit\"\n)\n\n# parameter prior\nparameter_prior <- c(\n  prior(normal(0, 1.5), nlpar = \"e0\"),\n  prior(normal(0, 1.5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n)\n\n# base model for continuous data, no covariates\ncontinuous_base_fit <- brm(\n  formula = base_model, \n  family = gaussian_measurement, \n  data = d_example_emax_3cov, \n  prior = parameter_prior\n) \n\n# base model for binary data, no covariates\nbinary_base_fit <- brm(\n  formula = base_model, \n  family = bernoulli_measurement, \n  data = d_example_emax_bin_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\n\n## Adding covariates\n\nIn the brms framework, the E~max~ function is treated as a structural model and covariates can be placed on any parameter. As an example, the model specified here sets `cov_a`, `cov_b`, and `cov_c` as covariates on the baseline response:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure), # structural model\n  e0   ~ 1 + cov_a + cov_b + cov_c, # covariate model for baseline\n  emax ~ 1,                         # covariate model for max response\n  ec50 ~ 1,                         # covariate model for EC50\n  nl = TRUE\n)\n```\n:::\n\n\n\n\n\n### Continuous response data\n\nTo apply this model to the continuous data, pass the `full_model` along with `parameter_prior` and `gaussian_measurement` to `brm()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_full_fit <- brm(\n  formula = full_model, \n  family = gaussian_measurement, \n  data = d_example_emax_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\n\nPrinting the `continuous_full_fit` object provides summary information about the regression coefficients for the covariates and other parameters:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_full_fit\n```\n\n<pre class=\"r-output\"><code> Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1 + cov_a + cov_b + cov_c\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       3.87      0.55     2.73     4.87 1.00     1077     1666\ne0_cov_a           0.32      0.02     0.29     0.35 1.00     2709     2287\ne0_cov_b           0.22      0.02     0.19     0.25 1.00     3467     2636\ne0_cov_c          -0.00      0.02    -0.03     0.03 1.00     3149     2570\nemax_Intercept    10.65      0.50     9.74    11.68 1.00     1196     1784\nec50_Intercept  3091.63    301.89  2535.37  3696.06 1.00     1233     1867\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.63      0.03     0.58     0.69 1.00     2884     2363\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\n\nExtending the data visualization used earlier, the model predictions can be plotted as a function of both `exposure` and `cov_a`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_full_fit |> \n  epred_draws(newdata = expand_grid(\n    exposure = seq(0, 50000, 1000),\n    cov_a = c(2, 5, 8), \n    cov_b = 5,\n    cov_c = 5\n  )) |> \n  summarize(response = mean(.epred), .groups = \"drop\") |> \n  ggplot(mapping = aes(exposure, response)) + \n  geom_path() + \n  geom_point(\n    data = d_example_emax_3cov |> \n      mutate(\n        cov_a_raw = cov_a,\n        cov_a = case_when(\n          cov_a < 3.5 ~ 2,\n          cov_a >= 3.5 & cov_a < 6.5 ~ 5,\n          cov_a >= 6.5 ~ 8\n        )\n      ),\n    mapping = aes(color = cov_a_raw)\n  ) + \n  facet_wrap(~cov_a) +\n  labs(color = \"cov_a\") + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Binary response data\n\nThe same approach can be used when the response variable is binary. As before, the only difference from the continuous model is the use of the `bernoulli_measurement` model:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_full_fit <- brm(\n  formula = full_model, \n  family = bernoulli_measurement, \n  data = d_example_emax_bin_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\n\nResults for this model are shown below: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_full_fit\n```\n\n<pre class=\"r-output\"><code> Family: bernoulli \n  Links: mu = logit \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1 + cov_a + cov_b + cov_c\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_bin_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept      -2.13      0.79    -3.64    -0.63 1.00     2384     2654\ne0_cov_a           0.16      0.06     0.05     0.27 1.00     3894     2986\ne0_cov_b           0.03      0.05    -0.08     0.14 1.00     3802     2686\ne0_cov_c          -0.03      0.06    -0.14     0.08 1.00     3928     2614\nemax_Intercept     2.71      0.85     1.05     4.38 1.00     2983     2500\nec50_Intercept  2355.67    450.63  1466.50  3261.21 1.00     3192     2107\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\n\nThe data visualization for this model is shown below:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_full_fit |> \n  epred_draws(newdata = expand_grid(\n    exposure = seq(0, 50000, 1000),\n    cov_a = c(2, 5, 8), \n    cov_b = 5,\n    cov_c = 5\n  )) |> \n  summarize(response = mean(.epred), .groups = \"drop\") |> \n  ggplot(mapping = aes(exposure, response)) + \n  geom_path() +\n  geom_jitter(\n    data = d_example_emax_bin_3cov |> \n      mutate(\n        cov_a_raw = cov_a,\n        cov_a = case_when(\n          cov_a < 3.5 ~ 2,\n          cov_a >= 3.5 & cov_a < 6.5 ~ 5,\n          cov_a >= 6.5 ~ 8\n        )\n      ),\n    mapping = aes(color = cov_a_raw),\n    width = 0,\n    height = .05\n  ) + \n  facet_wrap(~cov_a) +\n  labs(color = \"cov_a\") + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Model comparison\n\nThe brms package provides a flexible interface for model comparison using LOO-CV and WAIC, using the [loo](http://mc-stan.org/loo/) package internally. One workflow for calling this interface is illustrated in this section, using the two continuous-response E~max~ models as the example case. The first step is to use `add_criterion()` to run the LOO-CV procedure, and store the results internally within the brmsfit object:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_full_fit <- add_criterion(continuous_full_fit, \"loo\")\ncontinuous_base_fit <- add_criterion(continuous_base_fit, \"loo\")\n```\n:::\n\n\n\n\n\nIf necessary, the stored criterion results can be extracted from a model object as shown below:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_full_fit$criteria$loo\n```\n\n<pre class=\"r-output\"><code>\nComputed from 4000 by 300 log-likelihood matrix.\n\n         Estimate   SE\nelpd_loo   -289.5 12.5\np_loo         6.0  0.6\nlooic       579.0 25.1\n------\nMCSE of elpd_loo is 0.0.\nMCSE and ESS estimates assume MCMC draws (r_eff in [0.4, 1.1]).\n\nAll Pareto k estimates are good (k < 0.7).\nSee help('pareto-k-diagnostic') for details.\n</code></pre>\n:::\n\n\n\n\n\nTo compare two models that contain stored criterion results, use `loo_compare()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_loo_compare <- loo_compare(continuous_full_fit, continuous_base_fit)\ncontinuous_loo_compare\n```\n\n<pre class=\"r-output\"><code>                    elpd_diff se_diff\ncontinuous_full_fit    0.0       0.0 \ncontinuous_base_fit -150.1      13.4 \n</code></pre>\n:::\n\n\n\n\n\nBy default the printed output shows the most important columns, but the return value from `loo_compare()` contains additional information relevant to the model comparison. To view all columns, call the print method with `simplify = FALSE`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(continuous_loo_compare, simplify = FALSE)\n```\n\n<pre class=\"r-output\"><code>                    elpd_diff se_diff elpd_loo se_elpd_loo p_loo  se_p_loo\ncontinuous_full_fit    0.0       0.0  -289.5     12.5         6.0    0.6  \ncontinuous_base_fit -150.1      13.4  -439.6     11.8         2.9    0.3  \n                    looic  se_looic\ncontinuous_full_fit  579.0   25.1  \ncontinuous_base_fit  879.2   23.6  \n</code></pre>\n:::\n",
    "supporting": [
      "covariate_modeling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}