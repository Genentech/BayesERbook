{
  "hash": "7e6546e199c5d2bea5a2f40abb8a39df",
  "result": {
    "engine": "knitr",
    "markdown": "# Covariate modeling with brms\n\nThe previous chapter introduced the brms approach to Bayesian E~max~ modeling, with examples provided for hyperbolic and sigmoidal E~max~ models, and considering both continuous and binary outcomes. This chapter extends this by building models that include covariates, and shows examples of model comparison using leave-one-out cross-validation (LOO-CV).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(posterior)\nlibrary(tidybayes)\nlibrary(here)\n\ntheme_set(theme_bw(base_size = 12))\n```\n:::\n\n\n\n\n\n\n\n## Continuous response with covariates\n\nThe simulated data set contains three continuous covariates (`cov_a`, `cov_b`, and `cov_c`) that may be related to `response`. The univariate relationships between each covariate and the response are shown below, along with the relationship between `exposure` and `reponse`: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_3cov <- read_csv(here(\"data\", \"d_example_emax_3cov.csv\"))\n\nd_example_emax_3cov |> \n  pivot_longer(\n    cols = c(exposure, cov_a, cov_b, cov_c), \n    names_to = \"variable\",\n    values_to = \"value\"\n  ) |> \n  ggplot(aes(value, response)) + \n  geom_point() + \n  geom_smooth(formula = y ~ x, method = \"loess\") + \n  facet_wrap(~ variable, scales = \"free_x\")\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/show-continuous-emax-data-1.png){width=768}\n:::\n:::\n\n\n\n\n\nIn the brms framework, the E~max~ function is treated as a structural model and covariates can be placed on any parameter when the model is specified using `brmsformula()`. As an example, the model specified here sets `cov_a`, `cov_b`, and `cov_c` as covariates on the baseline response:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovariate_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure), # structural model\n  e0   ~ 1 + cov_a + cov_b + cov_c, # covariate model for baseline\n  emax ~ 1,                         # covariate model for max response\n  ec50 ~ 1,                         # covariate model for EC50\n  nl = TRUE\n)\n```\n:::\n\n\n\n\n\nThe measurement model and parameter prior are specified using `brmsfamily()` and `prior()`, and are the same as for the model without covariates:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngaussian_measurement <- brmsfamily(\n  family = \"gaussian\", \n  link = \"identity\"\n)\n\nparameter_prior <- c(\n  prior(normal(0, 1.5), nlpar = \"e0\"),\n  prior(normal(0, 1.5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n)\n```\n:::\n\n\n\n\n\nTo apply this model to the continuous data, pass all three of these to `brm()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_covariate_fit <- brm(\n  formula = covariate_model, \n  family = gaussian_measurement, \n  data = d_example_emax_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\n\nPrinting the `continuous_covariate_fit` object provides summary information about the regression coefficients for the covariates and other parameters:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_covariate_fit\n```\n\n<pre class=\"r-output\"><code> Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1 + cov_a + cov_b + cov_c\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       3.93      0.51     2.88     4.86 1.00     1348     1519\ne0_cov_a           0.52      0.01     0.49     0.54 1.00     3161     2457\ne0_cov_b           0.01      0.01    -0.01     0.04 1.00     3174     2612\ne0_cov_c          -0.00      0.01    -0.03     0.02 1.00     3086     2784\nemax_Intercept    10.67      0.45     9.83    11.60 1.00     1442     1861\nec50_Intercept  3156.65    293.13  2613.99  3766.23 1.01     1507     1940\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.52      0.02     0.49     0.57 1.00     3369     2848\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\n\nExtending the data visualization used earlier, the model predictions can be plotted as a function of both `exposure` and `cov_a`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_covariate_fit |> \n  epred_draws(newdata = expand_grid(\n    exposure = seq(0, 50000, 1000),\n    cov_a = c(2, 5, 8), \n    cov_b = 5,\n    cov_c = 5\n  )) |> \n  median_qi() |> \n  ggplot(mapping = aes(exposure, .epred)) + \n  geom_path() + \n  geom_ribbon(\n    mapping = aes(ymin = .lower, ymax = .upper), \n    alpha = 0.3\n  ) +\n  geom_point(\n    data = d_example_emax_3cov |> \n      mutate(\n        cov_a_raw = cov_a,\n        cov_a = case_when(\n          cov_a < 3.5 ~ 2,\n          cov_a >= 3.5 & cov_a < 6.5 ~ 5,\n          cov_a >= 6.5 ~ 8\n        )\n      ),\n    mapping = aes(y = response, color = cov_a_raw)\n  ) + \n  facet_wrap(~cov_a) +\n  labs(color = \"cov_a\") + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Binary response with covariates\n\nBuilding a covariate model for binary response data follows the same process as for continuous response data. As before, exploratory visualizations are helpful in illustrating the relationships between covariates and the response:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_bin_3cov <- read_csv(here(\"data\", \"d_example_emax_bin_3cov.csv\"))\n\nd_example_emax_bin_3cov |> \n  pivot_longer(\n    cols = c(exposure, cov_a, cov_b, cov_c), \n    names_to = \"variable\",\n    values_to = \"value\"\n  ) |> \n  mutate(response = factor(response)) |> \n  ggplot(aes(response, value)) + \n  geom_violin(draw_quantiles = .5) + \n  facet_wrap(~ variable, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/show-binary-emax-data-1.png){width=768}\n:::\n:::\n\n\n\n\n\nAs in the previous chapter, the only difference between the binary model and the continuous model is the use of the `bernoulli_measurement` model:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbernoulli_measurement <- brmsfamily(\n  family = \"bernoulli\", \n  link = \"logit\"\n)\n```\n:::\n\n\n\n\n\nThe `parameter_prior` and `covariate_model` are the same as before. All three are passed to `brm()`, as shown below: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_covariate_fit <- brm(\n  formula = covariate_model, \n  family = bernoulli_measurement, \n  data = d_example_emax_bin_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\n\nAfter the sampling finishes, printing the model fit object shows parameter estimates and details about the behavior of the sampler:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_covariate_fit\n```\n\n<pre class=\"r-output\"><code> Family: bernoulli \n  Links: mu = logit \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1 + cov_a + cov_b + cov_c\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_bin_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept      -2.05      0.85    -3.71    -0.40 1.00     2482     2307\ne0_cov_a           0.22      0.07     0.09     0.35 1.00     3452     2749\ne0_cov_b          -0.03      0.06    -0.15     0.10 1.00     3389     2531\ne0_cov_c          -0.03      0.06    -0.15     0.10 1.00     3851     2664\nemax_Intercept     3.42      0.90     1.62     5.22 1.00     2928     2560\nec50_Intercept  2468.70    444.34  1588.63  3371.21 1.00     3524     1982\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\n\nThe data visualization for this model is shown below:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_covariate_fit |> \n  epred_draws(newdata = expand_grid(\n    exposure = seq(0, 50000, 1000),\n    cov_a = c(2, 5, 8), \n    cov_b = 5,\n    cov_c = 5\n  )) |> \n  median_qi() |> \n  ggplot(mapping = aes(exposure, .epred)) + \n  geom_path() +\n  geom_ribbon(\n    mapping = aes(ymin = .lower, ymax = .upper), \n    alpha = 0.3\n  ) +\n  geom_jitter(\n    data = d_example_emax_bin_3cov |> \n      mutate(\n        cov_a_raw = cov_a,\n        cov_a = case_when(\n          cov_a < 3.5 ~ 2,\n          cov_a >= 3.5 & cov_a < 6.5 ~ 5,\n          cov_a >= 6.5 ~ 8\n        )\n      ),\n    mapping = aes(y = response, color = cov_a_raw),\n    width = 0,\n    height = .05\n  ) + \n  facet_wrap(~cov_a) +\n  labs(color = \"cov_a\") + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Setting covariates on other parameters\n\nThe previous two examples illustrate covariates placed on the intercept parameter `e0`. It is possible to define covariate models on any parameter within the E~max~ model. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nother_covariates <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure), # structural model\n  e0   ~ 1 + cov_a,   # covariate model for baseline\n  emax ~ 1 + cov_b,   # covariate model for max response\n  ec50 ~ 1,           # covariate model for EC50\n  nl = TRUE\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nother_covariates_fit <- brm(\n  formula = other_covariates, \n  family = gaussian_measurement, \n  data = d_example_emax_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\n\nPrinting the `other_covariates_fit` object provides summary information:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nother_covariates_fit\n```\n\n<pre class=\"r-output\"><code> Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1 + cov_a\n         emax ~ 1 + cov_b\n         ec50 ~ 1\n   Data: d_example_emax_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       4.00      0.49     2.95     4.86 1.01     1087     1354\ne0_cov_a           0.52      0.01     0.49     0.54 1.00     2533     2505\nemax_Intercept    10.53      0.45     9.70    11.47 1.00     1205     1389\nemax_cov_b         0.03      0.02    -0.01     0.06 1.00     3012     2588\nec50_Intercept  3161.11    291.05  2621.42  3745.07 1.01     1172     1605\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.52      0.02     0.48     0.57 1.00     2646     2363\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\n\n## Model comparison\n\nThe brms package provides a flexible interface for model comparison using LOO-CV and WAIC, using the [loo](http://mc-stan.org/loo/) package internally. One workflow for calling this interface is illustrated in this section, using the three possible E~max~ models as examples: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no covariates\nbase_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure),\n  e0   ~ 1,\n  emax ~ 1,\n  ec50 ~ 1,\n  nl = TRUE\n)\n\n# one predictor on e0\ncov_a_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure),\n  e0   ~ 1 + cov_a,\n  emax ~ 1,\n  ec50 ~ 1,\n  nl = TRUE\n)\n\n# three predictors on e0\ncov_abc_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure),\n  e0   ~ 1 + cov_a + cov_b + cov_c,\n  emax ~ 1,\n  ec50 ~ 1,\n  nl = TRUE\n)\n```\n:::\n\n\n\n\n\nIn addition to calling `brm()` to estimate regression coefficients, the `add_criterion()` function is called to run the LOO-CV procedure and store the results internally within the brmsfit object:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_fit <- base_model |> \n  brm(  \n    family = gaussian_measurement, \n    data = d_example_emax_3cov, \n    prior = parameter_prior\n  ) |> \n  add_criterion(\"loo\")\n  \ncov_a_fit <- cov_a_model |> \n  brm(\n    family = gaussian_measurement, \n    data = d_example_emax_3cov, \n    prior = parameter_prior\n  ) |> \n  add_criterion(\"loo\")\n\ncov_abc_fit <- cov_abc_model |> \n  brm(\n    family = gaussian_measurement, \n    data = d_example_emax_3cov, \n    prior = parameter_prior\n  ) |> \n  add_criterion(\"loo\")\n```\n:::\n\n\n\n\n\nTo compare models that have LOO criteria information added, use `loo_compare()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_comparison <- loo_compare(\n  base_fit,\n  cov_a_fit,\n  cov_abc_fit\n)\n\nmodel_comparison\n```\n\n<pre class=\"r-output\"><code>            elpd_diff se_diff\ncov_a_fit      0.0       0.0 \ncov_abc_fit   -1.7       1.1 \nbase_fit    -269.7      14.4 \n</code></pre>\n:::\n\n\n\n\n\nIn this example, `cov_a_fit` model outperforms the other two models. \n\nBy default the printed output shows the most important columns, but the return value from `loo_compare()` contains additional information relevant to the model comparison. To view all columns, call the print method with `simplify = FALSE`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(model_comparison, simplify = FALSE)\n```\n\n<pre class=\"r-output\"><code>            elpd_diff se_diff elpd_loo se_elpd_loo p_loo  se_p_loo looic \ncov_a_fit      0.0       0.0  -233.0     12.5         4.1    0.5    466.1\ncov_abc_fit   -1.7       1.1  -234.7     12.5         6.1    0.7    469.5\nbase_fit    -269.7      14.4  -502.7     10.6         2.8    0.2   1005.4\n            se_looic\ncov_a_fit     24.9  \ncov_abc_fit   25.1  \nbase_fit      21.3  \n</code></pre>\n:::\n",
    "supporting": [
      "covariate_modeling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}