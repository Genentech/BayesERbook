{
  "hash": "fbccef0265e5b4a4c31753d723f6c1b6",
  "result": {
    "engine": "knitr",
    "markdown": "# Covariate modeling\n\nThe [brms](https://paulbuerkner.com/brms/) package provides a flexible framework for specifying multilevel regression models, using Stan as the back end. It is typically used for models within the generalized linear mixed model (GLMM) specification, but can accommodate nonlinear models such as E~max~. This chapter uses the brms package to develop and evaluate Bayesian E~max~ regression models with and without covariates. Models for continuous and binary response data are discussed. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(posterior)\nlibrary(tidybayes)\nlibrary(here)\n\ntheme_set(theme_bw(base_size = 12))\n```\n:::\n\n\n\n\n\n\n## Load data\n\nTwo simulated data sets are used in this chapter. Both data sets include three continuous-valued covariates in addition to the exposure variable. In one data set the response is continuous, in the other it is binary-valued. The data sets are loaded as shown below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_3cov <- read_csv(here(\"data\", \"d_example_emax_3cov.csv\"))\nd_example_emax_bin_3cov <- read_csv(here(\"data\", \"d_example_emax_bin_3cov.csv\"))\n```\n:::\n\n\n\n\n## Building models in brms\n\nThis section shows how to build simple E~max~ models in brms without adding covariates. The extension to covariate modeling is discussed in the next section. \n\n### Continuous response data\n\nConsider the continuous response data first. In addition to an `exposure` column and a `response` column, there are three continuous covariates that may be related to the response:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_3cov\n```\n\n<pre class=\"r-output\"><code><span style='color: #555555;'># A tibble: 300 × 6</span>\n    dose exposure cov_a cov_b cov_c response\n   <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span>\n<span style='color: #555555;'> 1</span>   100    <span style='text-decoration: underline;'>4</span>151.  5.71  2.33  7.83     13.8\n<span style='color: #555555;'> 2</span>   100    <span style='text-decoration: underline;'>8</span>067.  4.92  4.66  6.74     14.0\n<span style='color: #555555;'> 3</span>   100    <span style='text-decoration: underline;'>4</span>878.  4.88  4.21  4.68     13.2\n<span style='color: #555555;'> 4</span>   100    <span style='text-decoration: underline;'>9</span>713.  8.42  6.56  1.29     16.1\n<span style='color: #555555;'> 5</span>   100   <span style='text-decoration: underline;'>11</span>491.  4.37  3.96  3.55     15.1\n<span style='color: #555555;'> 6</span>   100    <span style='text-decoration: underline;'>2</span>452.  8.69  7.60  3.64     13.4\n<span style='color: #555555;'> 7</span>   100    <span style='text-decoration: underline;'>5</span>652.  6.61  3.95  5.13     13.5\n<span style='color: #555555;'> 8</span>   100    <span style='text-decoration: underline;'>9</span>939.  5.35  7.77  8.29     15.5\n<span style='color: #555555;'> 9</span>   100    <span style='text-decoration: underline;'>5</span>817.  5.61  2.24  9.60     12.5\n<span style='color: #555555;'>10</span>   100    <span style='text-decoration: underline;'>5</span>176.  6.06  1.79  8.74     13.3\n<span style='color: #555555;'># ℹ 290 more rows</span>\n</code></pre>\n:::\n\n\n\n\nTo examine the structure of the data set, create an exploratory visualization:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_3cov |> \n  pivot_longer(\n    cols = c(exposure, cov_a, cov_b, cov_c), \n    names_to = \"variable\",\n    values_to = \"value\"\n  ) |> \n  ggplot(aes(value, response)) + \n  geom_point() + \n  geom_smooth(formula = y ~ x, method = \"loess\") + \n  facet_wrap(~ variable, scales = \"free_x\")\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/show-continuous-emax-data-1.png){width=768}\n:::\n:::\n\n\n\n\nInitially we will build a model that does not consider the covariates. To specify a regular E~max~ model in brms, use `brmsformula()` to describe the exposure-response relationship, setting `nl = TRUE` to ensure that brms interprets the input as a non-linear model:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure),\n  e0 ~ 1,\n  emax ~ 1,\n  ec50 ~ 1,\n  nl = TRUE\n) \n```\n:::\n\n\n\n\nIn this specification, the first formula indicates that the exposure-response relationship is an E~max~ function. The later formulas indicate that `e0`, `emax`, and `ec50` are model parameters.\n\nAssumptions must also be specified for the distribution of measurement errors. For simplicity, this example assumes errors are normally distributed. Use the `brmsfamily()` function to specify this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngaussian_measurement <- brmsfamily(\n  family = \"gaussian\", \n  link = \"identity\"\n)\n```\n:::\n\n\n\n\nParameter priors for `e0`, `emax`, and `ec50` must also be specified. In brms the default is to place an improper flat prior on regression parameters. For this example a weakly-informative prior is used. The `prior()` function is used for this, using the `nlpar` argument to specify the name of a non-linear parameter, and using `lb` and `ub` to impose lower and upper bounds if required:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparameter_prior <- c(\n  prior(normal(0, 5), nlpar = \"e0\"),\n  prior(normal(0, 5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n)\n```\n:::\n\n\n\n\nThese three components are then passed to `brm()` to estimate model parameters:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_base_fit <- brm(\n  formula = base_model, \n  family = gaussian_measurement, \n  data = d_example_emax_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\nWhen this code is executed a Stan model is compiled and run, and detailed information on the sampling is printed during the run. At the end, inspect the brms model object to obtain a summary of the model, the sampling, and the parameter estimates:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_base_fit\n```\n\n<pre class=\"r-output\"><code> Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       5.35      0.98     3.10     7.07 1.00      896      820\nemax_Intercept    11.91      0.95    10.23    14.01 1.00      944      841\nec50_Intercept  2779.11    401.75  2011.07  3597.75 1.00     1017      860\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.05      0.04     0.97     1.13 1.00     1583     1848\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\nThe data can be visualized in many different ways. A simple example is shown below, using `epred_draws()` to extract model predictions as a function of exposure:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_base_fit |> \n  epred_draws(newdata = tibble(exposure = seq(0, 50000, 1000))) |> \n  summarize(response = mean(.epred), .groups = \"drop\") |> \n  ggplot(mapping = aes(exposure, response)) + \n  geom_path() + \n  geom_point(data = d_example_emax_3cov)\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n### Binary response data\n\nThe data set with binary response data is identical to the continuous data apart from the `response` variable, which is now 0 or 1 for each subject:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_bin_3cov\n```\n\n<pre class=\"r-output\"><code><span style='color: #555555;'># A tibble: 300 × 6</span>\n    dose exposure cov_a cov_b cov_c response\n   <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span> <span style='color: #555555; font-style: italic;'><dbl></span>    <span style='color: #555555; font-style: italic;'><dbl></span>\n<span style='color: #555555;'> 1</span>   100    <span style='text-decoration: underline;'>4</span>151.  5.71  2.33  7.83        0\n<span style='color: #555555;'> 2</span>   100    <span style='text-decoration: underline;'>8</span>067.  4.92  4.66  6.74        1\n<span style='color: #555555;'> 3</span>   100    <span style='text-decoration: underline;'>4</span>878.  4.88  4.21  4.68        1\n<span style='color: #555555;'> 4</span>   100    <span style='text-decoration: underline;'>9</span>713.  8.42  6.56  1.29        1\n<span style='color: #555555;'> 5</span>   100   <span style='text-decoration: underline;'>11</span>491.  4.37  3.96  3.55        0\n<span style='color: #555555;'> 6</span>   100    <span style='text-decoration: underline;'>2</span>452.  8.69  7.60  3.64        0\n<span style='color: #555555;'> 7</span>   100    <span style='text-decoration: underline;'>5</span>652.  6.61  3.95  5.13        0\n<span style='color: #555555;'> 8</span>   100    <span style='text-decoration: underline;'>9</span>939.  5.35  7.77  8.29        0\n<span style='color: #555555;'> 9</span>   100    <span style='text-decoration: underline;'>5</span>817.  5.61  2.24  9.60        0\n<span style='color: #555555;'>10</span>   100    <span style='text-decoration: underline;'>5</span>176.  6.06  1.79  8.74        0\n<span style='color: #555555;'># ℹ 290 more rows</span>\n</code></pre>\n:::\n\n\n\n\nTo examine the structure of the data set, create an exploratory visualization:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_bin_3cov |> \n  pivot_longer(\n    cols = c(exposure, cov_a, cov_b, cov_c), \n    names_to = \"variable\",\n    values_to = \"value\"\n  ) |> \n  mutate(response = factor(response)) |> \n  ggplot(aes(response, value)) + \n  geom_violin(draw_quantiles = .5) + \n  facet_wrap(~ variable, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/show-binary-emax-data-1.png){width=768}\n:::\n:::\n\n\n\n\nTo adapt the brms model to be appropriate for binary responses, the measurement model is adjusted. As in logistic regression, binary responses are assumed to be Bernoulli distributed, with a logit link function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbernoulli_measurement <- brmsfamily(\n  family = \"bernoulli\", \n  link = \"logit\"\n)\n```\n:::\n\n\n\n\nThis is the only modification required: the `parameter_prior` and `base_model` are both unchanged. To estimate parameters, call `brm()` for the binary data set using the `bernoulli_measurement` family:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_base_fit <- brm(\n  formula = base_model, \n  family = bernoulli_measurement, \n  data = d_example_emax_bin_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\nAgain, inspect the model fit object to see the results:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_base_fit\n```\n\n<pre class=\"r-output\"><code> Family: bernoulli \n  Links: mu = logit \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_bin_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept      -3.27      1.04    -5.57    -1.35 1.00      968     1048\nemax_Intercept     5.07      1.22     2.73     7.69 1.00     1022     1090\nec50_Intercept  2170.78    459.24  1283.81  3121.13 1.00     1368     1452\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\nThe predictions of the fitted model are visualized below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_base_fit |> \n  epred_draws(newdata = tibble(exposure = seq(0, 50000, 1000))) |> \n  summarize(response = mean(.epred), .groups = \"drop\") |> \n  ggplot(mapping = aes(exposure, response)) + \n  geom_path() + \n  geom_jitter(data = d_example_emax_bin_3cov, width = 0, height = .05)\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n## Adding covariates\n\nIn the brms framework, the E~max~ function is treated as a structural model and covariates can be placed on any parameter. As an example, the model specified here sets `cov_a`, `cov_b`, and `cov_c` as covariates on the baseline response:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure), # structural model\n  e0   ~ 1 + cov_a + cov_b + cov_c, # covariate model for baseline\n  emax ~ 1,                         # covariate model for max response\n  ec50 ~ 1,                         # covariate model for EC50\n  nl = TRUE\n)\n```\n:::\n\n\n\n\n### Continuous response data\n\nTo apply this model to the continuous data, pass the `full_model` along with `parameter_prior` and `gaussian_measurement` to `brm()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_full_fit <- brm(\n  formula = full_model, \n  family = gaussian_measurement, \n  data = d_example_emax_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\nPrinting the `continuous_full_fit` object provides summary information about the regression coefficients for the covariates and other parameters:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_full_fit\n```\n\n<pre class=\"r-output\"><code> Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1 + cov_a + cov_b + cov_c\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       2.70      0.87     0.80     4.23 1.00     1654     1444\ne0_cov_a           0.32      0.02     0.29     0.35 1.00     3542     2548\ne0_cov_b           0.22      0.02     0.18     0.25 1.00     4354     2383\ne0_cov_c          -0.00      0.02    -0.03     0.03 1.00     3955     2672\nemax_Intercept    11.80      0.78    10.44    13.50 1.00     1729     1491\nec50_Intercept  2627.33    340.67  1989.70  3325.02 1.00     1717     1629\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.63      0.03     0.58     0.68 1.00     3893     2505\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\nExtending the data visualization used earlier, the model predictions can be plotted as a function of both `exposure` and `cov_a`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_full_fit |> \n  epred_draws(newdata = expand_grid(\n    exposure = seq(0, 50000, 1000),\n    cov_a = c(2, 5, 8), \n    cov_b = 5,\n    cov_c = 5\n  )) |> \n  summarize(response = mean(.epred), .groups = \"drop\") |> \n  ggplot(mapping = aes(exposure, response)) + \n  geom_path() + \n  geom_point(\n    data = d_example_emax_3cov |> \n      mutate(\n        cov_a_raw = cov_a,\n        cov_a = case_when(\n          cov_a < 3.5 ~ 2,\n          cov_a >= 3.5 & cov_a < 6.5 ~ 5,\n          cov_a >= 6.5 ~ 8\n        )\n      ),\n    mapping = aes(color = cov_a_raw)\n  ) + \n  facet_wrap(~cov_a) +\n  labs(color = \"cov_a\") + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n### Binary response data\n\nThe same approach can be used when the response variable is binary. As before, the only difference from the continuous model is the use of the `bernoulli_measurement` model:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_full_fit <- brm(\n  formula = full_model, \n  family = bernoulli_measurement, \n  data = d_example_emax_bin_3cov, \n  prior = parameter_prior\n) \n```\n:::\n\n\n\n\nResults for this model are shown below: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_full_fit\n```\n\n<pre class=\"r-output\"><code> Family: bernoulli \n  Links: mu = logit \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1 + cov_a + cov_b + cov_c\n         emax ~ 1\n         ec50 ~ 1\n   Data: d_example_emax_bin_3cov (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept      -4.52      1.28    -7.26    -2.22 1.00     1849     2045\ne0_cov_a           0.19      0.06     0.06     0.31 1.00     2888     2301\ne0_cov_b           0.05      0.06    -0.07     0.17 1.00     3327     2478\ne0_cov_c          -0.01      0.06    -0.13     0.10 1.00     3215     2557\nemax_Intercept     5.28      1.31     2.85     8.01 1.00     2097     2045\nec50_Intercept  2183.08    459.92  1291.80  3091.10 1.00     2576     2095\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n</code></pre>\n:::\n\n\n\n\nThe data visualization for this model is shown below:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbinary_full_fit |> \n  epred_draws(newdata = expand_grid(\n    exposure = seq(0, 50000, 1000),\n    cov_a = c(2, 5, 8), \n    cov_b = 5,\n    cov_c = 5\n  )) |> \n  summarize(response = mean(.epred), .groups = \"drop\") |> \n  ggplot(mapping = aes(exposure, response)) + \n  geom_path() +\n  geom_jitter(\n    data = d_example_emax_bin_3cov |> \n      mutate(\n        cov_a_raw = cov_a,\n        cov_a = case_when(\n          cov_a < 3.5 ~ 2,\n          cov_a >= 3.5 & cov_a < 6.5 ~ 5,\n          cov_a >= 6.5 ~ 8\n        )\n      ),\n    mapping = aes(color = cov_a_raw),\n    width = 0,\n    height = .05\n  ) + \n  facet_wrap(~cov_a) +\n  labs(color = \"cov_a\") + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](covariate_modeling_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n## Model comparison\n\nThe brms package provides a flexible interface for model comparison using LOO-CV and WAIC, using the [loo](http://mc-stan.org/loo/) package internally. One workflow for calling this interface is illustrated in this section, using the two continuous-response E~max~ models as the example case. The first step is to use `add_criterion()` to run the LOO-CV procedure, and store the results internally within the brmsfit object:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_full_fit <- add_criterion(continuous_full_fit, \"loo\")\ncontinuous_base_fit <- add_criterion(continuous_base_fit, \"loo\")\n```\n:::\n\n\n\n\nIf necessary, the stored criterion results can be extracted from a model object as shown below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_full_fit$criteria$loo\n```\n\n<pre class=\"r-output\"><code>\nComputed from 4000 by 300 log-likelihood matrix.\n\n         Estimate   SE\nelpd_loo   -289.5 12.4\np_loo         6.1  0.7\nlooic       579.0 24.8\n------\nMCSE of elpd_loo is 0.0.\nMCSE and ESS estimates assume MCMC draws (r_eff in [0.5, 1.1]).\n\nAll Pareto k estimates are good (k < 0.7).\nSee help('pareto-k-diagnostic') for details.\n</code></pre>\n:::\n\n\n\n\nTo compare two models that contain stored criterion results, use `loo_compare()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_loo_compare <- loo_compare(continuous_full_fit, continuous_base_fit)\ncontinuous_loo_compare\n```\n\n<pre class=\"r-output\"><code>                    elpd_diff se_diff\ncontinuous_full_fit    0.0       0.0 \ncontinuous_base_fit -150.1      13.4 \n</code></pre>\n:::\n\n\n\n\nBy default the printed output shows the most important columns, but the return value from `loo_compare()` contains additional information relevant to the model comparison. To view all columns, call the print method with `simplify = FALSE`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(continuous_loo_compare, simplify = FALSE)\n```\n\n<pre class=\"r-output\"><code>                    elpd_diff se_diff elpd_loo se_elpd_loo p_loo  se_p_loo\ncontinuous_full_fit    0.0       0.0  -289.5     12.4         6.1    0.7  \ncontinuous_base_fit -150.1      13.4  -439.6     11.9         3.1    0.4  \n                    looic  se_looic\ncontinuous_full_fit  579.0   24.8  \ncontinuous_base_fit  879.1   23.8  \n</code></pre>\n:::\n",
    "supporting": [
      "covariate_modeling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}