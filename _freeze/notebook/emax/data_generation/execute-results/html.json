{
  "hash": "e470041df8f0984a4ee7ad6945e320e5",
  "result": {
    "engine": "knitr",
    "markdown": "# Data generation\n\nThis page shows examples of data generation for Emax model with and without covariates.\n\n## Setup and load\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\n\ntheme_set(theme_bw(base_size = 12))\n\nset.seed(1234)\n```\n:::\n\n\n\n\n\n## Data generation - No covariate\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 20 # number of subjects\nE0 <- 5 # effect at 0 concentration\nEmax <- 10 # maximal effect\nEC50 <- 20 # concentration at half maximal effect\nh <- 2 # Hill coefficient\n\nset.seed(130)\nc.is <- 50 * runif(n) # exposure\n\nset.seed(130)\neps <- rnorm(n) # residual error\n\ny.is <- E0 + ((Emax * c.is^h) / (c.is^h + EC50^h)) + eps\n\nd_example_emax_nocov <- tibble(Conc = c.is, Y = y.is)\n```\n:::\n\n\n\n\n\n### Check data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(d_example_emax_nocov, aes(Conc, Y)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\", se = F, col = \"darkgrey\") +\n  scale_x_continuous(\"Exposure\", breaks = c(3, 10, 30, 100))\n\nggplot(d_example_emax_nocov, aes(Conc, Y)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\", se = F, col = \"darkgrey\") +\n  scale_x_log10(\"Exposure\", breaks = c(3, 10, 30, 100))\n```\n\n::: {.cell-output-display}\n![](data_generation_files/figure-html/fig-check-data-no-cov-1.png){#fig-check-data-no-cov-1 width=672}\n:::\n\n::: {.cell-output-display}\n![](data_generation_files/figure-html/fig-check-data-no-cov-2.png){#fig-check-data-no-cov-2 width=672}\n:::\n:::\n\n\n\n\n\n## Data generation - with covariate\n\nOnly one covariate (Prognostic factor positive/negative)\n\n1. Prognostic factor = positive (GpA) is more sensitive to the drug\n   - lower Emax in GpA; Emax.GpA = 10; Emax.GpB = 15\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNgp <- 2\nN <- 20 * Ngp\nGPid <- as.factor(rep(c(\"A\", \"B\"), each = 20))\n\n# Set parameters\nE0 <- 5\nEC50 <- 15\nh <- 2\nbeta1 <- .7\n\n# Calc response\nset.seed(12345)\n\nd_example_emax_cov <-\n  tibble(GP = GPid) |>\n  mutate(\n    c.is = 50 * runif(N), eps = rnorm(N)\n  ) |>\n  mutate(\n    Emax.i = ifelse(GP == \"A\", 10, 15)\n  ) |>\n  mutate(y.is = E0 + ((Emax.i * c.is^h) / (c.is^h + EC50^h)) + eps) |>\n  mutate(Conc = c.is, Y = y.is)\n```\n:::\n\n\n\n\n\n### Check data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(d_example_emax_cov, aes(Conc, Y)) +\n  geom_point(aes(colour = GP)) +\n  geom_smooth(aes(group = GP, colour = GP), se = F) +\n  scale_x_continuous(\"Exposure\") +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](data_generation_files/figure-html/fig-check-data-cov-1.png){#fig-check-data-cov width=672}\n:::\n:::\n\n\n\n\n\n## Data generation - multiple covariates\n\nConvenience functions used to generate the data sets. For the purposes of this data set exposures are assumed to be log-normally distributed (with slight truncation) and scale linearly with exposure. Continuous covariates are all bounded between 0 and 10. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemax_fn <- function(exposure, emax, ec50, e0, gamma = 1) {\n  e0 + emax * (exposure ^ gamma) / (ec50 ^ gamma + exposure ^ gamma)\n}\n\ngenerate_exposure <- function(dose, n, meanlog = 4, sdlog = 0.5) {\n  dose * qlnorm(\n    p = runif(n, min = .01, max = .99), \n    meanlog = meanlog,\n    sdlog = sdlog\n  )\n}\n\ngenerate_covariate <- function(n) {\n  rbeta(n, 2, 2) * 10\n}\n```\n:::\n\n\n\n\n\n### Continuous response\n\nDefine a function `make_continuous_data()` that simulates exposure-response data for a study with three dosing groups, continuous Emax response, and three continuous covariates:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_continuous_data <- function(seed = 123) {\n  \n  set.seed(seed)\n  \n  par <- list(\n    emax   = 10, \n    ec50   = 4000, \n    e0     = 5,\n    gamma  = 1,\n    sigma  = .6,\n    coef_a = .3,\n    coef_b = .2,\n    coef_c = 0\n  )\n\n  make_data <- function(dose, n, par) {\n    tibble(\n      dose = dose, \n      exposure = generate_exposure(max(dose, .01), n = n), \n      cov_a = generate_covariate(n = n),\n      cov_b = generate_covariate(n = n),\n      cov_c = generate_covariate(n = n),\n      response = emax_fn(\n        exposure,\n        emax = par$emax, \n        ec50 = par$ec50, \n        e0 = par$e0, \n        gamma = par$gamma\n      ) + \n        par$coef_a * cov_a + \n        par$coef_b * cov_b + \n        par$coef_c * cov_c + \n        rnorm(n, 0, par$sigma)\n    )\n  }\n  \n  dat <- bind_rows(\n    make_data(dose = 100, n = 100, par = par),  \n    make_data(dose = 200, n = 100, par = par),\n    make_data(dose = 300, n = 100, par = par)\n  ) \n  \n  return(dat)\n}\n```\n:::\n\n\n\n\n\nCall the function to generate the data set:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_3cov <- make_continuous_data()\nd_example_emax_3cov\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 300 × 6\n    dose exposure cov_a cov_b cov_c response\n   <dbl>    <dbl> <dbl> <dbl> <dbl>    <dbl>\n 1   100    4151.  5.71  2.33  7.83     13.8\n 2   100    8067.  4.92  4.66  6.74     14.0\n 3   100    4878.  4.88  4.21  4.68     13.2\n 4   100    9713.  8.42  6.56  1.29     16.1\n 5   100   11491.  4.37  3.96  3.55     15.1\n 6   100    2452.  8.69  7.60  3.64     13.4\n 7   100    5652.  6.61  3.95  5.13     13.5\n 8   100    9939.  5.35  7.77  8.29     15.5\n 9   100    5817.  5.61  2.24  9.60     12.5\n10   100    5176.  6.06  1.79  8.74     13.3\n# ℹ 290 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n### Check data\n\nScatter plots and loess regressions of `response` against the four relevant predictors: `exposure`, `cov_a`, `cov_b`, and `cov_c`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_3cov |> \n  pivot_longer(\n    cols = c(exposure, cov_a, cov_b, cov_c), \n    names_to = \"variable\",\n    values_to = \"value\"\n  ) |> \n  ggplot(aes(value, response)) + \n  geom_point() + \n  geom_smooth(formula = y ~ x, method = \"loess\") + \n  facet_wrap(~ variable, scales = \"free_x\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](data_generation_files/figure-html/fig-check-continuous-emax-data-1.png){#fig-check-continuous-emax-data width=768}\n:::\n:::\n\n\n\n\n\n\n### Binary response\n\nDefine a function `make_binary_data()` that simulates exposure-response data for a study with three dosing groups, binary Emax response, and three continuous covariates:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_binary_data <- function(seed = 123) {\n  \n  set.seed(seed)\n  \n  par <- list(\n    emax   = 5, \n    ec50   = 8000, \n    e0     = -3,\n    gamma  = 1,\n    coef_a = .2,\n    coef_b = 0,\n    coef_c = 0\n  )\n  \n  make_data <- function(dose, n, par) {\n    tibble(\n      dose = dose, \n      exposure = generate_exposure(max(dose, .01), n = n), \n      cov_a = generate_covariate(n = n),\n      cov_b = generate_covariate(n = n),\n      cov_c = generate_covariate(n = n),\n      pred = emax_fn( # non-linear predictor\n        exposure,\n        emax = par$emax, \n        ec50 = par$ec50, \n        e0 = par$e0, \n        gamma = par$gamma\n      ) + \n        par$coef_a * cov_a + \n        par$coef_b * cov_b + \n        par$coef_c * cov_c,\n      prob = 1 / (1 + exp(-pred)), # response probability\n      response = as.numeric(runif(n) < prob) # binary response\n    ) |> \n      select(-pred, -prob)\n  }\n  \n  dat <- bind_rows(\n    make_data(dose = 100, n = 100, par = par),  \n    make_data(dose = 200, n = 100, par = par),\n    make_data(dose = 300, n = 100, par = par)\n  ) \n  \n  return(dat)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_bin_3cov <- make_binary_data()\nd_example_emax_bin_3cov\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 300 × 6\n    dose exposure cov_a cov_b cov_c response\n   <dbl>    <dbl> <dbl> <dbl> <dbl>    <dbl>\n 1   100    4151.  5.71  2.33  7.83        0\n 2   100    8067.  4.92  4.66  6.74        1\n 3   100    4878.  4.88  4.21  4.68        1\n 4   100    9713.  8.42  6.56  1.29        1\n 5   100   11491.  4.37  3.96  3.55        0\n 6   100    2452.  8.69  7.60  3.64        0\n 7   100    5652.  6.61  3.95  5.13        0\n 8   100    9939.  5.35  7.77  8.29        0\n 9   100    5817.  5.61  2.24  9.60        0\n10   100    5176.  6.06  1.79  8.74        0\n# ℹ 290 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n### Check data\n\nViolin plots showing the distribution of the four relevant predictors `exposure`, `cov_a`, `cov_b`, and `cov_c` stratified by whether the `response` is 0 or 1:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_example_emax_bin_3cov |> \n  pivot_longer(\n    cols = c(exposure, cov_a, cov_b, cov_c), \n    names_to = \"variable\",\n    values_to = \"value\"\n  ) |> \n  mutate(response = factor(response)) |> \n  ggplot(aes(response, value)) + \n  geom_violin(draw_quantiles = .5) + \n  facet_wrap(~ variable, scales = \"free_y\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](data_generation_files/figure-html/fig-check-binary-emax-data-1.png){#fig-check-binary-emax-data width=768}\n:::\n:::\n\n\n\n\n\n## Save data\n\nOnly run in an interactive session so that the data is not saved every time\nthe document is rendered (by setting `eval: FALSE`).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(d_example_emax_nocov, here(\"data\", \"d_example_emax_nocov.csv\"))\nwrite_csv(d_example_emax_cov, here(\"data\", \"d_example_emax_cov.csv\"))\n```\n:::\n",
    "supporting": [
      "data_generation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}